@using RouletteWebAPI.Models.Base
@using RouletteWebAPI.Services
@page "/"
@*@inject SingletonCounter counterValue*@

@if (Wheel != null)
{
    <div class="container">
        <div class="roulette">
            <div class="numbers">
                <ul>
                    @foreach (var wheelnumber in Wheel.WheelNumbers)
                    {
                        <WheelNumberComponent WheelNumber="@wheelnumber"></WheelNumberComponent>
                    }
                </ul>
            </div>
            <div class="ball-circle">

            </div>
            <div class="inner-circle">

            </div>
        </div>
        @if (Wheel.Colour != null)
        {
            <p>You have picked @Wheel.Colour.Value</p>}
        @if (Wheel.WinningNumber != null)
        {
            <p>The winning number is @Wheel.WinningNumber.Number @Wheel.WinningNumber.Colour. @(Wheel.WinningNumber.Colour == Wheel.Colour ? "You win" : "You lose")</p>}

        @if (!Wheel.Running)
        {
            <p>
                <button type="submit" @onclick="@(async(e) => await OnRollAsync(e, WheelNumberColour.Red))">Red</button>
                <button type="submit" @onclick="@(async(e) => await OnRollAsync(e, WheelNumberColour.Black))">Black</button>
            </p>}

    </div>
}
@code { public Wheel Wheel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Wheel = new Wheel();

        Wheel.OnStartAsync += async () =>
        {
            StateHasChanged();
            await Task.CompletedTask;
        };
        Wheel.OnFinishAsync += async () =>
        {
            StateHasChanged();
            await Task.CompletedTask;
        };
        Wheel.OnNumberChangedAsync += async () =>
        {
            for (var index = 0; index <= Wheel.WheelNumbers.GetUpperBound(0); index++)
            {
                if (index == Wheel.CurrentNumberIndex)
                {
                    Wheel.WheelNumbers[index].selected = true;
                }
                else
                {
                    Wheel.WheelNumbers[index].selected = false;
                }
            }
            StateHasChanged();
            await Task.CompletedTask;
        };

        await base.OnInitializedAsync();
    }

    public async Task OnRollAsync(MouseEventArgs mouseEventArgs, WheelNumberColour colour)
    {
        Wheel.Colour = colour;

        await Wheel.RollTheBallAsync();
    }
}
